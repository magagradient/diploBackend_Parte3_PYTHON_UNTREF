# Controlar errores

"""
En Python tenemos la posibilidad de controlar errores en determinadas situaciones, implementando el uso del bloque try - except.
Este funciona igual al bloque try - catch utilizado en muchos lenguajes de programaci√≥n definiendo en el bloque try, el c√≥digo a ejecutar en el cual podemos tener alg√∫n tipo de error.
Adem√°s de controlar los errores utilizando TypeError, Python ofrece una variedad de tipos de excepciones que puedes controlar utilizando el bloque except.

* ValueError: Se produce cuando ocurre un error relacionado con el tipo correcto pero un valor incorrecto, como cuando intentas convertir una cadena en un n√∫mero y la cadena no es num√©rica.
* ZeroDivisionError: Se produce cuando intentas dividir un n√∫mero por cero, lo cual no est√° permitido.
* NameError: Se produce cuando intentas acceder a una variable o funci√≥n que no est√° definida en el √°mbito actual.
* IndexError: Se produce cuando intentas acceder a un √≠ndice fuera de rango en una secuencia, como una lista o una cadena.
* KeyboardInterrupt: Se produce cuando el usuario interrumpe la ejecuci√≥n del programa presionando Ctrl + C en la consola.
"""

def normalizar_nombre(texto):
    if len(texto.strip()) > 0:
        return texto.strip().lower()

try:
    nombre = normalizar_nombre("      AubReY pLaZa   ")
    print(nombre) # aubrey plaza

    nombre = normalizar_nombre()
    print(nombre) 
except TypeError:  
    print('El parametro es incorrecto')  

####-----------------####

def dividir(num1, num2):
    return num1 / num2

try:
    dividir(85, 5)
except ZeroDivisionError:
    print('Division por cero')
except:
    print('Error')
else:
    print('Sin error')
finally:
    print('Siempre se ejecuta')


####-----------------####

# Este bloque de c√≥digo define una funci√≥n para dividir dos n√∫meros de forma segura, manejando posibles errores, y luego ejecuta esa funci√≥n interactuando con el usuario:

# Definici√≥n de la funci√≥n dividir_numeros:

"""
Par√°metros:

* dividendo: El n√∫mero que ser√° dividido.
* divisor: El n√∫mero por el que se divide el dividendo.

Bloque try:
Intenta realizar la operaci√≥n de divisi√≥n dividendo / divisor.
Si es exitosa, devuelve el resultado con return resultado.

Manejo de excepciones (except):
* ZeroDivisionError: Se lanza si el divisor es 0. En ese caso, se genera un nuevo error (ValueError) con el mensaje "‚õîÔ∏è Error: Divisi√≥n por cero no permitida.".
* TypeError: Se lanza si los valores no son num√©ricos (por ejemplo, si se pasa un string). Tambi√©n se genera un error ValueError con el mensaje "‚õîÔ∏è Error: Los valores deben ser num√©ricos.".
"""

def dividir_numeros(dividendo, divisor):
    try:
        resultado = dividendo / divisor
        return resultado
    except ZeroDivisionError:
        raise ValueError("‚õîÔ∏è Error: Divisi√≥n por cero no permitida.")
    except TypeError:
        raise ValueError("‚õîÔ∏è Error: Los valores deben ser num√©ricos.")

# Ejecutamos la funci√≥n
try:
    num1 = float(input("Ingresa el dividendo: "))
    num2 = float(input("Ingresa el divisor: "))
    resultado = dividir_numeros(num1, num2)
    print("‚úÖ El resultado de la divisi√≥n es:", resultado)

except ValueError as error:
    print("Error de valor: " + str(error))
except KeyboardInterrupt:
    print("üü° Operaci√≥n interrumpida por el usuario.")

"""
Ejecuci√≥n de la funci√≥n:

Entrada del usuario:
Se solicita el dividendo y el divisor con input. Ambos valores se convierten a tipo float para garantizar que sean num√©ricos.

Llamada a la funci√≥n:
Se pasa num1 y num2 a dividir_numeros.

Salida:
Si la operaci√≥n es exitosa, se imprime el resultado.
"""

"""
Manejo de errores al ejecutar la funci√≥n:

* ValueError: Si ocurre un error relacionado con la l√≥gica de la divisi√≥n (por ejemplo, divisi√≥n por cero o valores no num√©ricos), se captura y se imprime el mensaje de error.

* KeyboardInterrupt: Se captura si el usuario interrumpe la ejecuci√≥n del programa (por ejemplo, presionando Ctrl + C). Se imprime un mensaje indicando que la operaci√≥n fue interrumpida.
"""

# El c√≥digo es robusto y asegura que:

# Se puedan manejar entradas err√≥neas (como valores no num√©ricos o divisor igual a cero).
# Se pueda interactuar de forma segura con el usuario.
# Ofrezca mensajes claros para cada tipo de error.